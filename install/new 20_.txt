1. Вводное занятие:
  - Знакомство со студентами, рассказ тренера о себе, где работает, какими технологиями/проектами занимается помимо работы, как пришел в ИТ, про первую работу, хобби.
  - Знакомство с вебом: в чем преимущества веба как платформы (обратная совместимость, открытые стандарты, широкое комьюнити, кроссплатформенность), какие особенности развития JavaScript-экосистемы (скорость появления новых технологий и спецификаций), рассказ о программе курса.
  - Демонстрация студентам примеров приложений, которые они смогут делать после успешного окончания курса.
  - Обзор HTTP от `0.9` до `1.1`, синтаксис запроса/ответа, методы, классы статус-кодов, основные (простые для понимания) хидеры: `Accept`, `Set-Cookie`, `User-Agent`, `Referer`, `DNT`.
  - Анатомия URL и значимость адреса в современных веб-приложениях.
  - Высокоуровневый обзор архитектуры SPA: шаблоны и роутер на клиенте, API (показать на примере популярных сервисов, только REST) и база данных на сервере, упомянуть AJAX.
1. Git и GitHub:
  - Хеширование и контрольные суммы. 
  - История возникновения Git, его философия и workflow.
  - Установка CLI `git`, базовые команды, staging area.
  - `blame`, `stash` и `rebase`.
  - Как правильно делать коммиты и писать сообщения, какие есть методологии.
  - Git-хостинги, закомство с веб-интерфейсом GitHub и десктопным приложением.
  - Обзор markdown, обычный и github-flavored.
  - Возможности веб-интерфейса: редактирование и ревью кода, PR, issues, gists.
1. HTML:
  - Коротко про редакторы кода, IDE, объяснить опции и настроить `.editorconfig`.
  - Определение "markup language", когда появились, зачем нужны, как синтаксически эволюционировали.
  - История развития и стандартизации HTML (от W3C vs WHATWG до переноса разработки на GitHub).
  - Синтаксис современного HTML (tag vs element, character references, tag/quotes omission, boolean attributes).
  - `<!doctype>`, определение семантики, presentational vs semantic markup.
  - Категории аттрибутов и содержимого элементов.
  - Подробное знакомство с часто используемыми элементами из каждой категории: `<em>` или `<i>`, `<article>` или `<section>`, кейсы для `<mark>` и прочее.
  - Document outline и W3C validator.
  - Полезные аттрибуты: `hidden`, `datetime`, валидация форм.
  - Новейшие фичи: `download`, `<picture>` и `srcset`, `<dialog>` и `<menu>`, слоты.
1. CSS:
  - История возникновения и синтаксис. Языки, чуть было не ставшие CSS. Про CSS3 или модуляризация спецификаций.
  - Синтаксис, escapes. Типы значений, или почему `0` это не всегда `0%unit%`. Identifier vs string.
  - Селекторы, псевдно-элементы и псевдо-классы. Распространение `:hover`, кейсы для `:checked` и `:target`, ограничения `:visited`. Generated content.
  - Специфичность и `!important`. Replaced elements.
  - User Agent стили, метасвойство `all`, ключевые слова `unset`, `revert`, `inherit`, `initial`.
  - Display, position, box model, margin collapse, stacking context.
  - Flexbox раскладки, `float` и `clear`.
  - CSS Level 3 transitons, animations, `@supports`. Медиа-запросы, вьюпорт-единицы.
  - Новейшие фичи: custom properties, `filter`s, `blend-mode`, scroll snap points, `position: sticky`.
  - Houdini WG.
1. CSS tooling:
  - Какие задачи решают препроцессоры, как они работают, обзор синтаксиса (перменные, миксины, сахар) SCSS/LESS/Stylus.
  - Для чего нужен PostCSS или что препроцессоры не могут, его история развития, какой у него pipeline.
  - Обзор популярных плагинов, с которыми можно повторить нужны функционал препроцессоров (набор `precss`).
  - Linting и минификация, проверка accessibility, фичи из новых CSS стандартов (набор `cssnext`), polyfills.
  - Еще более advanced плагины: прячем хаки, performance tweaks (`will-change`, `contain`). Обзор API и написание плагина.
1. Sketch
1. JavaScript:
  - История развития и стандартизации: TC39, ECMA262 и как они работают.
  - Базовый синтаксис: переменные и идентификаторы, ключевые и зарезервированные слова, ASI.
  - Все про числа: IEEE 754, системы счисления, арифметические и побайтовые операторы, number literals.
  - Ветвления, циклы и массивы на базовом уровне (без таких понятий, как "метод" и "объект"). Решение "школьных задач".
  - Другие примитивы, сведение типов, equality algorithms, ASI.
  - Функции, область видимости, completion records (`try/catch/finally`, `return/break/continue`).
  - Объекты, их внутренние методы, prototype chain, оператор `in`.
  - Преобразование примитивов в объекты, методы строк (в том числе и новые) и `ToPrimitive`.
  - Контекст вызова функции (`call/apply/bind`), замыкания, как работает `new`.
  - Дескрипторы свойств, геттеры и сеттеры.
  - Методы массивов, самостоятельное их написание.